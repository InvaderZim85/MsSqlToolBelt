<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZimLabs.WpfBase</name>
    </assembly>
    <members>
        <member name="T:ZimLabs.WpfBase.RelayCommand`1">
            <inheritdoc />
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ZimLabs.WpfBase.RelayCommand`1.#ctor(System.Action{`0})">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:WpfUtility.Services.RelayCommand`1" /> class.
            </summary>
            <param name="action">The execute method.</param>
        </member>
        <member name="M:ZimLabs.WpfBase.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ZimLabs.WpfBase.RelayCommand`1" /> class.
            </summary>
            <param name="action">The execute method.</param>
            <param name="canExecute">The can execute method.</param>
        </member>
        <member name="M:ZimLabs.WpfBase.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can action in its current state.
            </summary>
            <param name="parameter">
            Data used by the command.  If the command does not require data to be passed, this object can
            be set to null.
            </param>
            <returns><c>true</c> if this command can be executed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="E:ZimLabs.WpfBase.RelayCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should action.
            </summary>
        </member>
        <member name="M:ZimLabs.WpfBase.RelayCommand`1.Execute(System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:ZimLabs.WpfBase.CommandManagerHelper">
            <summary>
            This class contains methods for the CommandManager that help avoid memory leaks by using weak references.
            </summary>
        </member>
        <member name="M:ZimLabs.WpfBase.CommandManagerHelper.CallWeakReferenceHandlers(System.Collections.Generic.List{System.WeakReference})">
            <summary>
            Calls the weak reference handlers.
            </summary>
            <param name="handlers">The handlers.</param>
        </member>
        <member name="M:ZimLabs.WpfBase.CommandManagerHelper.AddWeakReferenceHandler(System.Collections.Generic.List{System.WeakReference}@,System.EventHandler)">
            <summary>
            Adds the weak reference handler.
            </summary>
            <param name="handlers">The handlers.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:ZimLabs.WpfBase.CommandManagerHelper.RemoveWeakReferenceHandler(System.Collections.Generic.List{System.WeakReference},System.EventHandler)">
            <summary>
            Removes the weak reference handler.
            </summary>
            <param name="handlers">The handlers.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="T:ZimLabs.WpfBase.DelegateCommand">
            <summary>
            This class allows delegating the commanding logic to methods passed as parameters,
            and enables a View to bind commands to objects that are not part of the element tree.
            </summary>
        </member>
        <member name="M:ZimLabs.WpfBase.DelegateCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:ZimLabs.WpfBase.DelegateCommand" /> class.
            </summary>
            <param name="executeMethod">The execute method.</param>
        </member>
        <member name="M:ZimLabs.WpfBase.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:ZimLabs.WpfBase.DelegateCommand" /> class.
            </summary>
            <param name="executeMethod">The execute method.</param>
            <param name="canExecuteMethod">The can execute method.</param>
        </member>
        <member name="E:ZimLabs.WpfBase.DelegateCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:ZimLabs.WpfBase.DelegateCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">
            Data used by the command.  If the command does not require data to be passed, this object can
            be set to null.
            </param>
            <returns><c>true</c> if this command can be executed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ZimLabs.WpfBase.DelegateCommand.System#Windows#Input#ICommand#Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">
            Data used by the command.  If the command does not require data to be passed, this object can
            be set to null.
            </param>
        </member>
        <member name="M:ZimLabs.WpfBase.DelegateCommand.Execute(System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:ZimLabs.WpfBase.DelegateCommand.CanExecute">
            <summary>
            Method to determine if the command can be executed.
            </summary>
            <returns><c>true</c> if this instance can execute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ZimLabs.WpfBase.DelegateCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:ZimLabs.WpfBase.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChaged event
            </summary>
        </member>
        <member name="M:ZimLabs.WpfBase.DelegateCommand.OnCanExecuteChanged">
            <summary>
            Protected virtual method to raise CanExecuteChanged event
            </summary>
        </member>
        <member name="T:ZimLabs.WpfBase.ObservableObject">
            <summary>
            This class allows simpler handling of the INotifyPropertyChanged
            </summary>
        </member>
        <member name="T:ZimLabs.WpfBase.ObservableObject.PropertyAccessType">
            <summary>
            The different property access types
            </summary>
        </member>
        <member name="F:ZimLabs.WpfBase.ObservableObject.PropertyAccessType.Any">
            <summary>
            All properties
            </summary>
        </member>
        <member name="F:ZimLabs.WpfBase.ObservableObject.PropertyAccessType.Read">
            <summary>
            Only properties which are readable
            </summary>
        </member>
        <member name="F:ZimLabs.WpfBase.ObservableObject.PropertyAccessType.Write">
            <summary>
            Only properties which are write able
            </summary>
        </member>
        <member name="E:ZimLabs.WpfBase.ObservableObject.PropertyChanged">
            <summary>
            </summary>
        </member>
        <member name="M:ZimLabs.WpfBase.ObservableObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the OnPropertyChanged event
            </summary>
            <param name="propertyName">Name of the property (if none is given CallerMemberName will be used)</param>
        </member>
        <member name="M:ZimLabs.WpfBase.ObservableObject.OnPropertyChanged(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Raises the OnPropertyChanged event for a list of properties
            </summary>
            <param name="properties">The list of properties</param>
        </member>
        <member name="M:ZimLabs.WpfBase.ObservableObject.SetField``1(``0@,``0,System.String)">
            <summary>
            Sets a field to the given value
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="field">Reference of the given field</param>
            <param name="value">Value which will be set to the field</param>
            <param name="propertyName">Name of the property (if none is given CallerMemberName will be used)</param>
            <returns>True if the value has changed or false if it is equal</returns>
        </member>
        <member name="M:ZimLabs.WpfBase.ObservableObject.SetField``1(``0@,System.String,System.Object,System.String,System.Boolean)">
            <summary>
            Sets a field of the given class to the given value
            </summary>
            <typeparam name="T">The type of the class</typeparam>
            <param name="parent">The class which contains the field</param>
            <param name="property">The name of the field</param>
            <param name="value">The new value</param>
            <param name="propertyName">Name of the property (if none is given CallerMemberName will be used)</param>
            <param name="suppressException">Set the value to true when you want to suppress exception, otherwise false (optional)</param>
            <returns>True if the value has changed or false if it is equal</returns>
        </member>
        <member name="M:ZimLabs.WpfBase.ObservableObject.GetProperties(ZimLabs.WpfBase.ObservableObject.PropertyAccessType,System.Boolean)">
            <summary>
            Gets all properties of the deriving class
            </summary>
            <param name="accessType">The <see cref="T:ZimLabs.WpfBase.ObservableObject.PropertyAccessType"/> of the properties (optional, default = Read | Write)</param>
            <param name="onlyPublic"><see langword="true"/> to get only public properties, otherwise <see langword="false"/> (optional, default = <see langword="true"/></param>
            <returns></returns>
        </member>
    </members>
</doc>
